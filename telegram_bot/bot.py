# bot.py
# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω–æ–π –ë–î (SQLite) –∏ –≤—ã–¥–∞—á–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
# –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä –¥–∞—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (BME280 / DHT22) —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ.

import os, sqlite3, time, json, asyncio
from datetime import datetime
from typing import Optional, Tuple, Dict, Any
from zoneinfo import ZoneInfo

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import BadRequest

# ---------- –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------
DB_FILE             = os.environ.get("DB_FILE", "/data/weather.db")
TZ                  = os.environ.get("TZ", "Europe/Vilnius")
TZINFO              = ZoneInfo(TZ)

# –°–µ–Ω—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (bme280|dht22)
SENSOR_DEFAULT      = (os.environ.get("SENSOR_PREFERRED", "bme280") or "bme280").lower()

# –†–µ—Ç–µ–Ω—à–Ω –ë–î (–≤ –¥–Ω—è—Ö) ‚Äî —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å /ago
RETENTION_DAYS      = int(os.environ.get("RETENTION_DAYS", "90"))

# –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ (—Å–µ–∫)
CACHE_TTL_SEC       = float(os.environ.get("CACHE_TTL_SEC", "2.0"))

# Read-only –¥–æ—Å—Ç—É–ø –∫ –ë–î
READONLY            = True

# –ê–Ω—Ç–∏-–¥—Ä–µ–±–µ–∑–≥ –∫–ª–∏–∫–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–º—Å)
DEBOUNCE_MS         = int(os.environ.get("DEBOUNCE_MS", "400"))

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç—Ä–µ–Ω–¥–∞
TREND_MINUTES_DEFAULT = int(os.environ.get("TREND_MINUTES", "30"))

# ---------- –∫—ç—à/–∞–Ω—Ç–∏—Å–ø–∞–º/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ–Ω—Å–æ—Ä–∞ ----------
# –ö–ª—é—á –∫—ç—à–∞ ‚Äî (minutes, sensor). –ó–Ω–∞—á–µ–Ω–∏–µ ‚Äî (text, expires_at).
_cache: Dict[Tuple[int, str], Tuple[str, float]] = {}
_last_hit: Dict[int, float] = {}
_selected_sensor: Dict[int, str] = {}  # chat_id -> 'bme280'|'dht22'

def get_selected_sensor(chat_id: int) -> str:
    return _selected_sensor.get(chat_id, SENSOR_DEFAULT)

def set_selected_sensor(chat_id: int, sensor: str) -> None:
    if sensor in ("bme280", "dht22"):
        _selected_sensor[chat_id] = sensor

def _cache_get(minutes: int, sensor: str) -> Optional[str]:
    it = _cache.get((minutes, sensor))
    if not it: return None
    text, exp = it
    return text if time.time() <= exp else None

def _cache_put(minutes: int, sensor: str, text: str) -> None:
    _cache[(minutes, sensor)] = (text, time.time() + CACHE_TTL_SEC)

def _too_fast(chat_id: int, ms: int = DEBOUNCE_MS) -> bool:
    now = time.monotonic()
    prev = _last_hit.get(chat_id, 0.0)
    _last_hit[chat_id] = now
    return (now - prev) * 1000.0 < ms


# ---------- —É—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏/—Ñ–æ—Ä–º–∞—Ç–∞ ----------
def ts_to_local_str(ts: int) -> str:
    return datetime.fromtimestamp(ts, tz=TZINFO).strftime("%Y-%m-%d %H:%M:%S")

def _fmt_num(v: Optional[float], fmt: str) -> str:
    return "‚Äî" if v is None else fmt.format(float(v))

def _fmt_trend(delta: Optional[float], fmt: str) -> str:
    if delta is None: return "‚Äî"
    d = float(delta)
    arrow = "‚Üó" if d > 0 else ("‚Üò" if d < 0 else "‚Üí")
    return f"{arrow} " + fmt.format(d)


# ---------- DB: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã ----------
def connect(readonly: bool = READONLY) -> sqlite3.Connection:
    """
    Read-only –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite.
    mode=ro + immutable=1: SQLite –Ω–µ –ø–∏—à–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    cache=shared: –æ–±—â–∏–π –∫—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü –º–µ–∂–¥—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
    """
    if readonly:
        uri = f"file:{DB_FILE}?mode=ro&cache=shared&immutable=1"
        con = sqlite3.connect(uri, uri=True, timeout=5)
        con.row_factory = sqlite3.Row
        con.execute("PRAGMA busy_timeout=5000;")
        con.execute("PRAGMA temp_store=MEMORY;")
        con.execute("PRAGMA cache_size=-20000;")  # ~20MB
        try: con.execute("PRAGMA mmap_size=268435456;")
        except Exception: pass
        return con
    else:
        os.makedirs(os.path.dirname(DB_FILE), exist_ok=True)
        con = sqlite3.connect(DB_FILE, timeout=10)
        con.row_factory = sqlite3.Row
        con.execute("PRAGMA busy_timeout=10000;")
        con.execute("PRAGMA journal_mode=WAL;")
        con.execute("PRAGMA synchronous=NORMAL;")
        con.execute("PRAGMA temp_store=MEMORY;")
        con.execute("PRAGMA cache_size=-20000;")
        try: con.execute("PRAGMA mmap_size=268435456;")
        except Exception: pass
        return con

SQL_LATEST_FOR_SENSOR = """
SELECT sensor, ts, temp, hum, press
FROM readings
WHERE sensor=?
ORDER BY ts DESC
LIMIT 1;
"""
SQL_LATEST_ANY = """
SELECT sensor, ts, temp, hum, press
FROM readings
ORDER BY ts DESC
LIMIT 1;
"""
SQL_AT_MINUS_FOR_SENSOR = """
SELECT sensor, ts, temp, hum, press
FROM readings
WHERE sensor=? AND ts <= ?
ORDER BY ts DESC
LIMIT 1;
"""
SQL_AT_MINUS_ANY = """
SELECT sensor, ts, temp, hum, press
FROM readings
WHERE ts <= ?
ORDER BY ts DESC
LIMIT 1;
"""
SQL_SENSORS_OVERVIEW = """
SELECT sensor, COUNT(*) AS cnt, MAX(ts) AS last_ts
FROM readings
GROUP BY sensor
ORDER BY last_ts DESC;
"""

def _fetch_one(sql: str, params=()):
    con = connect()
    try:
        return con.execute(sql, params).fetchone()
    finally:
        con.close()

def get_latest_for_sensor(sensor: str):
    row = _fetch_one(SQL_LATEST_FOR_SENSOR, (sensor,))
    return (row["sensor"], row["ts"], row["temp"], row["hum"], row["press"]) if row else None

def get_latest_any():
    row = _fetch_one(SQL_LATEST_ANY)
    return (row["sensor"], row["ts"], row["temp"], row["hum"], row["press"]) if row else None

def get_at_minus_for_sensor(sensor: str, minutes: int):
    target = int(time.time()) - max(0, minutes) * 60
    row = _fetch_one(SQL_AT_MINUS_FOR_SENSOR, (sensor, target))
    return (row["sensor"], row["ts"], row["temp"], row["hum"], row["press"]) if row else None

def get_at_minus_any(minutes: int):
    target = int(time.time()) - max(0, minutes) * 60
    row = _fetch_one(SQL_AT_MINUS_ANY, (target,))
    return (row["sensor"], row["ts"], row["temp"], row["hum"], row["press"]) if row else None

def sensors_overview():
    con = connect()
    try:
        return con.execute(SQL_SENSORS_OVERVIEW).fetchall()
    finally:
        con.close()

def compute_trend(sensor: str, minutes: int):
    """Œî –º–µ–∂–¥—É ¬´—Å–µ–π—á–∞—Å¬ª –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º N –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –ø–æ —Ç–æ–º—É –∂–µ —Å–µ–Ω—Å–æ—Ä—É."""
    now_row  = get_latest_for_sensor(sensor) or get_latest_any()
    past_row = get_at_minus_for_sensor(sensor, minutes) or get_at_minus_any(minutes)
    if not now_row or not past_row:
        return (None, None, None)
    _, _, t_now, h_now, p_now = now_row
    _, _, t_past, h_past, p_past = past_row
    def diff(a, b): return None if a is None or b is None else float(a) - float(b)
    return (diff(t_now, t_past), diff(h_now, h_past), diff(p_now, p_past))


# ---------- –æ–±—ë—Ä—Ç–∫–∞: DB-–æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ ----------
async def _run_db(fn, *a, **kw):
    return await asyncio.to_thread(fn, *a, **kw)


# ---------- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / UI ----------
def format_row(title: str, row, selected_sensor: str, trend=None) -> str:
    """
    –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–Ω—Å–æ—Ä.
    row: (sensor, ts, temp, hum, press)
    trend: (Œît, Œîh, Œîp) ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ.
    """
    header = f"–í—ã–±—Ä–∞–Ω –¥–∞—Ç—á–∏–∫: *{selected_sensor.upper()}*"
    if not row:
        return f"{header}\n\n{title}\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    sensor, ts, t, h, p = row

    text = (
        f"{header}\n\n"
        f"{title} ({sensor})\n"
        f"üïí {ts_to_local_str(ts)}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {_fmt_num(t, '{:.1f}')} ¬∞C\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {_fmt_num(h, '{:.0f}')} %\n"
        f"üß≠ –î–∞–≤–ª–µ–Ω–∏–µ: {_fmt_num(p, '{:.0f}')} mmHg"
    )

    if trend is not None:
        dt, dh, dp = trend
        text += (
            "\n"
            f"–¢—Ä–µ–Ω–¥: "
            f"{_fmt_trend(dt, '{:+.1f}')} ¬∞C | "
            f"{_fmt_trend(dh, '{:+.0f}')} % | "
            f"{_fmt_trend(dp, '{:+.0f}')} mm"
        )

    return text

def kb_main(selected_sensor: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
      [BME280] [DHT22]    ‚Üê —Å—Ç—Ä–æ–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ (–∞–∫—Ç–∏–≤–Ω—ã–π —Å –≥–∞–ª–æ—á–∫–æ–π)
      [ –°–µ–π—á–∞—Å ] [ 30 –º–∏–Ω ] [ 1 —á–∞—Å ] [ 2 —á–∞—Å–∞ ]
      [ Œî 30 –º–∏–Ω ]
    """
    row_sensors = [
        InlineKeyboardButton(
            ("‚úÖ BME280" if selected_sensor == "bme280" else "BME280"),
            callback_data="sensor:bme280"
        ),
        InlineKeyboardButton(
            ("‚úÖ DHT22" if selected_sensor == "dht22" else "DHT22"),
            callback_data="sensor:dht22"
        ),
    ]
    row_time = [
        InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data="ago:0"),
        InlineKeyboardButton("30 –º–∏–Ω", callback_data="ago:30"),
        InlineKeyboardButton("1 —á–∞—Å",  callback_data="ago:60"),
        InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="ago:120"),
    ]
    row_trend = [InlineKeyboardButton("Œî 30 –º–∏–Ω", callback_data=f"trend:{TREND_MINUTES_DEFAULT}")]
    return InlineKeyboardMarkup([row_sensors, row_time, row_trend])


# ---------- –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ ----------
def pick_latest_sync(sensor: str, minutes: int = 0):
    """–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –ø–æ —Å–µ–Ω—Å–æ—Ä—É –∏ –º–∏–Ω—É—Ç–∞–º (0 = —Ç–µ–∫—É—â–∞—è)."""
    if minutes <= 0:
        row = get_latest_for_sensor(sensor)
        return row or get_latest_any()
    row = get_at_minus_for_sensor(sensor, minutes)
    return row or get_at_minus_any(minutes)


# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    set_selected_sensor(chat_id, get_selected_sensor(chat_id))  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ –¥–∞—Ç—á–∏–∫–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/weather ‚Äî —Ç–µ–∫—É—â–µ–µ —Å –º–µ–Ω—é\n"
        "/ago <–º–∏–Ω—É—Ç—ã> [sensor] ‚Äî –ø–æ–∫–∞–∑–∞–Ω–∏—è N –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥\n"
        "/trend [–º–∏–Ω—É—Ç—ã] [sensor] ‚Äî —Ç—Ä–µ–Ω–¥ Œî (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω)\n"
        "/debug ‚Äî –∫—Ä–∞—Ç–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î\n"
        "/dbdiag ‚Äî –ø—É—Ç—å, —Ä–∞–∑–º–µ—Ä –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    await update.message.reply_text(text, reply_markup=kb_main(get_selected_sensor(chat_id)))

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_start(update, context)

async def cmd_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–Ω—Å–æ—Ä—É (–∏–∑ –º–µ–Ω—é)."""
    try:
        chat_id = update.message.chat_id
        sensor  = get_selected_sensor(chat_id)
        minutes = 0

        cached = _cache_get(minutes, sensor)
        if cached:
            await update.message.reply_text(cached, reply_markup=kb_main(sensor), parse_mode="Markdown")
            return

        row = await _run_db(pick_latest_sync, sensor, minutes)
        new_text = format_row("–°–µ–π—á–∞—Å", row, sensor)
        _cache_put(minutes, sensor, new_text)

        await update.message.reply_text(new_text, reply_markup=kb_main(sensor), parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

async def cmd_ago(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /ago <–º–∏–Ω—É—Ç—ã> [sensor]
    –ü—Ä–∏–º–µ—Ä—ã: /ago 15   |   /ago 90 dht22
    """
    try:
        chat_id = update.message.chat_id
        args = context.args or []

        minutes = None
        sensor = None
        for a in args:
            if minutes is None and a.isdigit():
                minutes = int(a)
            elif sensor is None:
                sensor = a.lower()

        if minutes is None:
            await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç: /ago 30 [bme280|dht22]")
            return

        max_minutes = RETENTION_DAYS * 24 * 60
        minutes = max(0, min(minutes, max_minutes))
        if sensor not in ("bme280", "dht22", None):
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–Ω—Å–æ—Ä. –î–æ–ø—É—Å—Ç–∏–º–æ: bme280 –∏–ª–∏ dht22.")
            return
        if sensor is None:
            sensor = get_selected_sensor(chat_id)

        cached = _cache_get(minutes, sensor)
        if cached:
            await update.message.reply_text(cached, reply_markup=kb_main(sensor), parse_mode="Markdown")
            return

        row = await _run_db(pick_latest_sync, sensor, minutes)
        title = "–°–µ–π—á–∞—Å" if minutes <= 0 else f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
        new_text = format_row(title, row, sensor)
        _cache_put(minutes, sensor, new_text)

        await update.message.reply_text(new_text, reply_markup=kb_main(sensor), parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

async def cmd_trend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /trend [–º–∏–Ω—É—Ç—ã] [sensor] ‚Äî —Ç—Ä–µ–Ω–¥ Œî –º–µ–∂–¥—É ¬´—Å–µ–π—á–∞—Å¬ª –∏ N –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.
    –ü—Ä–∏–º–µ—Ä—ã: /trend   |   /trend 60   |   /trend 45 dht22
    """
    try:
        chat_id = update.message.chat_id
        args = context.args or []
        minutes = None
        sensor = None
        for a in args:
            if minutes is None and a.isdigit():
                minutes = int(a)
            elif sensor is None:
                sensor = a.lower()

        if minutes is None:
            minutes = TREND_MINUTES_DEFAULT

        max_minutes = RETENTION_DAYS * 24 * 60
        minutes = max(1, min(minutes, max_minutes))
        if sensor not in ("bme280", "dht22", None):
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–Ω—Å–æ—Ä. –î–æ–ø—É—Å—Ç–∏–º–æ: bme280 –∏–ª–∏ dht22.")
            return
        if sensor is None:
            sensor = get_selected_sensor(chat_id)

        dt, dh, dp = await _run_db(compute_trend, sensor, minutes)
        base = await _run_db(pick_latest_sync, sensor, 0)
        text = format_row("–°–µ–π—á–∞—Å", base, sensor, trend=(dt, dh, dp))
        text += f"\n(–¢—Ä–µ–Ω–¥ –∑–∞ {minutes} –º–∏–Ω)"
        await update.message.reply_text(text, reply_markup=kb_main(sensor), parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

async def cmd_debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rows = await _run_db(sensors_overview)
        if not rows:
            await update.message.reply_text("–í –ë–î –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return
        lines = [f"‚Ä¢ {r['sensor']}: {r['cnt']} —à—Ç, –ø–æ—Å–ª–µ–¥–Ω–∏–π: {ts_to_local_str(r['last_ts'])}" for r in rows]
        await update.message.reply_text("–°–µ–Ω—Å–æ—Ä—ã –≤ –ë–î:\n" + "\n".join(lines))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

async def cmd_dbdiag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        path = os.path.abspath(DB_FILE)
        exists = os.path.exists(DB_FILE)
        size = os.path.getsize(DB_FILE) if exists else 0
        rows = await _run_db(sensors_overview)
        cnt = sum(r["cnt"] for r in rows) if rows else 0

        lines = [
            f"DB_FILE: {DB_FILE}",
            f"–ê–±—Å. –ø—É—Ç—å: {path}",
            f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {exists}",
            f"–†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç",
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {cnt}",
        ]
        if rows:
            for r in rows:
                lines.append(f"‚Ä¢ {r['sensor']}: {r['cnt']} —à—Ç, –ø–æ—Å–ª–µ–¥–Ω–∏–π: {ts_to_local_str(r['last_ts'])}")

        await update.message.reply_text("\n".join(lines))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")


# ---------- –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ----------
async def on_select_sensor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–∞ –∫–Ω–æ–ø–∫–∞–º–∏ BME280/DHT22 –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ (—Ä–µ–∂–∏–º '–°–µ–π—á–∞—Å')."""
    q = update.callback_query
    try:
        await q.answer()
        chat_id = q.message.chat_id
        if _too_fast(chat_id):
            await q.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–∏–µ‚Ä¶", show_alert=False)
            return

        sensor = q.data.split(":")[1]
        set_selected_sensor(chat_id, sensor)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–°–µ–π—á–∞—Å¬ª –ø–æ –Ω–æ–≤–æ–º—É —Å–µ–Ω—Å–æ—Ä—É
        minutes = 0
        cached = _cache_get(minutes, sensor)
        if cached:
            if q.message and (q.message.text or "") == cached:
                await q.edit_message_reply_markup(reply_markup=kb_main(sensor))
                return
            await q.edit_message_text(cached, reply_markup=kb_main(sensor), parse_mode="Markdown")
            return

        row = await _run_db(pick_latest_sync, sensor, minutes)
        new_text = format_row("–°–µ–π—á–∞—Å", row, sensor)
        _cache_put(minutes, sensor, new_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –æ–±–Ω–æ–≤–∏–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        if q.message and (q.message.text or "") == new_text:
            await q.edit_message_reply_markup(reply_markup=kb_main(sensor))
        else:
            await q.edit_message_text(new_text, reply_markup=kb_main(sensor), parse_mode="Markdown")

    except BadRequest as e:
        if "Message is not modified" in str(e):
            await q.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=False); return
        await q.edit_message_text(f"–û—à–∏–±–∫–∞: BadRequest: {e}")
    except Exception as e:
        await q.edit_message_text(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

async def on_ago(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
        chat_id = q.message.chat_id
        if _too_fast(chat_id):
            await q.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–∏–µ‚Ä¶", show_alert=False)
            return

        minutes = int(q.data.split(":")[1])
        sensor  = get_selected_sensor(chat_id)

        cached = _cache_get(minutes, sensor)
        if cached:
            # –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –æ–¥–∏–Ω-–≤-–æ–¥–∏–Ω ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ç–µ–∫—Å—Ç, –æ–±–Ω–æ–≤–∏–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—á—Ç–æ–± –≥–∞–ª–æ—á–∫–∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–∞—Å—å)
            if q.message and (q.message.text or "") == cached:
                await q.edit_message_reply_markup(reply_markup=kb_main(sensor))
                return
            await q.edit_message_text(cached, reply_markup=kb_main(sensor), parse_mode="Markdown")
            return

        row = await _run_db(pick_latest_sync, sensor, minutes)
        title = "–°–µ–π—á–∞—Å" if minutes <= 0 else f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
        new_text = format_row(title, row, sensor)
        _cache_put(minutes, sensor, new_text)

        if q.message and (q.message.text or "") == new_text:
            await q.edit_message_reply_markup(reply_markup=kb_main(sensor))
            return
        await q.edit_message_text(new_text, reply_markup=kb_main(sensor), parse_mode="Markdown")

    except BadRequest as e:
        if "Message is not modified" in str(e):
            await q.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=False); return
        await q.edit_message_text(f"–û—à–∏–±–∫–∞: BadRequest: {e}")
    except Exception as e:
        await q.edit_message_text(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

async def on_trend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ 'Œî 30 –º–∏–Ω' ‚Äî –±—ã—Å—Ç—Ä—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–Ω—Å–æ—Ä—É."""
    q = update.callback_query
    try:
        await q.answer()
        chat_id = q.message.chat_id
        if _too_fast(chat_id):
            await q.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–∏–µ‚Ä¶", show_alert=False)
            return

        minutes = int(q.data.split(":")[1])
        sensor  = get_selected_sensor(chat_id)

        dt, dh, dp = await _run_db(compute_trend, sensor, minutes)
        base = await _run_db(pick_latest_sync, sensor, 0)
        text = format_row("–°–µ–π—á–∞—Å", base, sensor, trend=(dt, dh, dp))
        text += f"\n(–¢—Ä–µ–Ω–¥ –∑–∞ {minutes} –º–∏–Ω)"

        if q.message and (q.message.text or "") == text:
            await q.edit_message_reply_markup(reply_markup=kb_main(sensor))
            return
        await q.edit_message_text(text, reply_markup=kb_main(sensor), parse_mode="Markdown")

    except BadRequest as e:
        if "Message is not modified" in str(e):
            await q.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=False); return
        await q.edit_message_text(f"–û—à–∏–±–∫–∞: BadRequest: {e}")
    except Exception as e:
        await q.edit_message_text(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")


# ---------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ ----------
async def setup_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start",     "–ü–∞–º—è—Ç–∫–∞ –∏ –º–µ–Ω—é"),
        BotCommand("help",      "–ü–∞–º—è—Ç–∫–∞"),
        BotCommand("weather",   "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É (–º–µ–Ω—é)"),
        BotCommand("ago",       "–ü–æ–∫–∞–∑–∞–Ω–∏—è N –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥: /ago 15 [sensor]"),
        BotCommand("trend",     "–¢—Ä–µ–Ω–¥ Œî: /trend [–º–∏–Ω—É—Ç—ã] [sensor]"),
        BotCommand("debug",     "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —á—Ç–æ –≤ –ë–î"),
        BotCommand("dbdiag",    "–ü—É—Ç—å –∫ –ë–î –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    ])

def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set")

    app = ApplicationBuilder().token(token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start",     cmd_start))
    app.add_handler(CommandHandler("help",      cmd_help))
    app.add_handler(CommandHandler("weather",   cmd_weather))
    app.add_handler(CommandHandler("ago",       cmd_ago))
    app.add_handler(CommandHandler("trend",     cmd_trend))
    app.add_handler(CommandHandler("debug",     cmd_debug))
    app.add_handler(CommandHandler("dbdiag",    cmd_dbdiag))

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: –≤—ã–±–æ—Ä —Å–µ–Ω—Å–æ—Ä–∞, –≤—Ä–µ–º—è –∏ —Ç—Ä–µ–Ω–¥
    app.add_handler(CallbackQueryHandler(on_ago,           pattern=r"^ago:\d+$"))
    app.add_handler(CallbackQueryHandler(on_select_sensor, pattern=r"^sensor:(bme280|dht22)$"))
    app.add_handler(CallbackQueryHandler(on_trend,         pattern=r"^trend:\d+$"))

    app.post_init = setup_commands
    app.run_polling()

if __name__ == "__main__":
    main()
